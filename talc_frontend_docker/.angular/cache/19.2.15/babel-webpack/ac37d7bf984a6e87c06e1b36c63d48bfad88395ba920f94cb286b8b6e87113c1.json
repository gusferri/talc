{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AdjuntosService = /*#__PURE__*/(() => {\n  class AdjuntosService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiBaseUrl;\n    }\n    // Obtener adjuntos de un paciente\n    obtenerAdjuntosPaciente(idPaciente) {\n      return this.http.get(`${this.baseUrl}/pacientes/adjuntos/${idPaciente}`).pipe(map(adjuntosBackend => adjuntosBackend.map(adj => ({\n        id: adj.ID,\n        titulo: adj.Titulo,\n        fechaSubida: adj.FechaSubida,\n        nombreArchivo: adj.NombreArchivo,\n        rutaArchivo: adj.RutaArchivo,\n        usuarioSubio: adj.UsuarioSubio,\n        especialidad: adj.Especialidad\n      }))));\n    }\n    // Subir un nuevo adjunto\n    subirAdjunto(archivo, titulo, idPaciente, username, idEspecialidad) {\n      const formData = new FormData();\n      formData.append('archivo', archivo);\n      formData.append('titulo', titulo);\n      formData.append('id_paciente', idPaciente.toString());\n      formData.append('username', username);\n      if (idEspecialidad) {\n        formData.append('id_especialidad', idEspecialidad.toString());\n      }\n      return this.http.post(`${this.baseUrl}/pacientes/adjuntos`, formData);\n    }\n    // Descargar un adjunto\n    descargarAdjunto(documentoId) {\n      return this.http.get(`${this.baseUrl}/pacientes/adjuntos/descargar/${documentoId}`, {\n        responseType: 'blob'\n      });\n    }\n    // Obtener URL para visualizar un adjunto\n    visualizarAdjunto(documentoId) {\n      return this.http.get(`${this.baseUrl}/pacientes/adjuntos/visualizar/${documentoId}`, {\n        responseType: 'blob'\n      });\n    }\n    // Eliminar un adjunto\n    eliminarAdjunto(documentoId) {\n      return this.http.delete(`${this.baseUrl}/pacientes/adjuntos/${documentoId}`);\n    }\n    // Método helper para crear URL de blob para visualización\n    crearUrlVisualizacion(blob) {\n      return URL.createObjectURL(blob);\n    }\n    // Método helper para descargar blob\n    descargarBlob(blob, nombreArchivo) {\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = nombreArchivo;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }\n    static {\n      this.ɵfac = function AdjuntosService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AdjuntosService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AdjuntosService,\n        factory: AdjuntosService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AdjuntosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { startWith, map } from 'rxjs';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/turnos.service\";\nimport * as i3 from \"../../services/paciente.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/select\";\nimport * as i9 from \"@angular/material/autocomplete\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/button\";\nimport * as i12 from \"@angular/material/card\";\nimport * as i13 from \"@angular/material/datepicker\";\nimport * as i14 from \"@angular/material/icon\";\nfunction NuevoTurnoComponent_mat_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const paciente_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", paciente_r2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", paciente_r2.Nombre, \" \", paciente_r2.Apellido, \" \");\n  }\n}\nfunction NuevoTurnoComponent_mat_option_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const profesional_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", profesional_r3);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", profesional_r3.nombre, \" \", profesional_r3.apellido, \" \");\n  }\n}\nfunction NuevoTurnoComponent_mat_option_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 29);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const esp_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", esp_r4.ID);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", esp_r4.Nombre, \" \");\n  }\n}\nfunction NuevoTurnoComponent_mat_option_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 30);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const hora_r5 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", hora_r5)(\"disabled\", ctx_r5.estaOcupado(hora_r5));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", hora_r5, \" \");\n  }\n}\nexport let NuevoTurnoComponent = /*#__PURE__*/(() => {\n  class NuevoTurnoComponent {\n    constructor(fb, turnosService, pacienteService, snackBar, router, cdr, route) {\n      this.fb = fb;\n      this.turnosService = turnosService;\n      this.pacienteService = pacienteService;\n      this.snackBar = snackBar;\n      this.router = router;\n      this.cdr = cdr;\n      this.route = route;\n      this.pacientes = [];\n      this.profesionales = [];\n      this.especialidades = [];\n      this.especialidadesFiltradas = [];\n      this.horasDisponibles = ['08:00', '09:00', '10:00', '11:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00'];\n      this.horasFiltradas = [];\n      this.turnos = [];\n      this.isLoading = false;\n      this.today = new Date();\n      this.modoEdicion = false;\n      this.idTurnoEditar = null;\n      this.pacientesCargados = false;\n      this.profesionalesCargados = false;\n      this.especialidadesCargadas = false;\n      this.turnoParaEditar = null;\n      this.patchRetryCount = 0;\n      this.patchRetryLimit = 20;\n      this.patchIntentado = false;\n    }\n    ngOnInit() {\n      this.form = this.fb.group({\n        ID_Paciente: [null, Validators.required],\n        pacienteCtrl: [''],\n        ID_Profesional: [null, Validators.required],\n        profesionalCtrl: [''],\n        ID_Especialidad: [null, Validators.required],\n        Fecha: [null, Validators.required],\n        Hora: [null, Validators.required]\n      });\n      this.route.paramMap.subscribe(params => {\n        const id = params.get('id');\n        if (id) {\n          this.modoEdicion = true;\n          this.idTurnoEditar = +id;\n          this.turnosService.obtenerTurnoPorId(+id).subscribe(turno => {\n            // Conversión de hora si es necesario\n            let horaValue = turno.Hora;\n            if (typeof horaValue === 'number') {\n              const totalMinutes = Math.floor(horaValue / 60);\n              const h = Math.floor(totalMinutes / 60).toString().padStart(2, '0');\n              const m = (totalMinutes % 60).toString().padStart(2, '0');\n              horaValue = `${h}:${m}`;\n            } else if (typeof horaValue === 'string') {\n              horaValue = horaValue.substring(0, 5);\n            }\n            const pacienteObj = this.pacientes.find(p => p.ID === turno.ID_Paciente) || '';\n            const profesionalObj = this.profesionales.find(p => p.ID === turno.ID_Profesional) || '';\n            this.form.patchValue({\n              ID_Paciente: turno.ID_Paciente,\n              pacienteCtrl: pacienteObj,\n              ID_Profesional: turno.ID_Profesional,\n              profesionalCtrl: profesionalObj,\n              ID_Especialidad: turno.ID_Especialidad,\n              Fecha: new Date(turno.Fecha),\n              Hora: horaValue\n            }, {\n              emitEvent: false\n            });\n            this.form.get('ID_Paciente')?.disable();\n            this.form.get('pacienteCtrl')?.disable();\n            this.form.get('ID_Profesional')?.disable();\n            this.form.get('profesionalCtrl')?.disable();\n            this.form.get('ID_Especialidad')?.disable();\n            this.turnoParaEditar = turno;\n            // En modo edición, llenar especialidadesFiltradas con la especialidad del turno\n            if (this.modoEdicion) {\n              this.especialidadesFiltradas = [{\n                ID: turno.ID_Especialidad,\n                Nombre: turno.Especialidad\n              }];\n            }\n          });\n        }\n      });\n      // Solo para alta, no para edición\n      if (!this.modoEdicion) {\n        this.form.get('ID_Profesional')?.valueChanges.subscribe(id => {\n          this.cargarEspecialidadesPorProfesional(id);\n          this.form.get('ID_Especialidad')?.reset();\n        });\n      }\n      this.cargarPacientes();\n      this.cargarProfesionales();\n      this.cargarTurnos();\n      this.form.get('Fecha')?.valueChanges.subscribe(() => {\n        this.filtrarHorasDisponibles();\n      });\n      this.form.get('ID_Profesional')?.valueChanges.subscribe(() => {\n        this.filtrarHorasDisponibles();\n      });\n      this.form.get('ID_Paciente')?.valueChanges.subscribe(() => {\n        this.filtrarHorasDisponibles();\n      });\n      this.filteredPacientes = this.form.get('pacienteCtrl').valueChanges.pipe(startWith(''), map(value => this._filterPacientes(value || '')));\n      this.filteredProfesionales = this.form.get('profesionalCtrl').valueChanges.pipe(startWith(''), map(value => this._filterProfesionales(value || '')));\n    }\n    _filterPacientes(value) {\n      let filterValue = '';\n      if (typeof value === 'string') {\n        filterValue = value.toLowerCase();\n      } else if (value && (value.Nombre || value.nombre)) {\n        filterValue = (value.Nombre || value.nombre).toLowerCase();\n      }\n      return this.pacientes.filter(p => p.Nombre && p.Nombre.toLowerCase().includes(filterValue) || p.Apellido && p.Apellido.toLowerCase().includes(filterValue));\n    }\n    _filterProfesionales(value) {\n      let filterValue = '';\n      if (typeof value === 'string') {\n        filterValue = value.toLowerCase();\n      } else if (value && (value.Nombre || value.nombre)) {\n        filterValue = (value.Nombre || value.nombre).toLowerCase();\n      }\n      return this.profesionales.filter(p => p.nombre && p.nombre.toLowerCase().includes(filterValue) || p.apellido && p.apellido.toLowerCase().includes(filterValue));\n    }\n    seleccionarPaciente(paciente) {\n      this.form.get('ID_Paciente')?.setValue(paciente.ID);\n    }\n    seleccionarProfesional(profesional) {\n      this.form.get('ID_Profesional')?.setValue(profesional.ID);\n    }\n    cargarTurnos() {\n      this.turnosService.obtenerTurnos().subscribe(data => {\n        this.turnos = data;\n        this.cdr.detectChanges();\n        // Log de ejemplo de turno\n        if (this.turnos.length > 0) {\n          console.log('🟢 Primer turno en this.turnos:', this.turnos[0]);\n          const turnoPaciente = this.turnos.find(t => t.ID_Paciente?.toString() === this.form.get('ID_Paciente')?.value?.toString());\n          if (turnoPaciente) {\n            console.log('🔵 Turno con mismo paciente:', turnoPaciente);\n          }\n          const turnoProfesional = this.turnos.find(t => t.ID_Profesional?.toString() === this.form.get('ID_Profesional')?.value?.toString());\n          if (turnoProfesional) {\n            console.log('🟣 Turno con mismo profesional:', turnoProfesional);\n          }\n        }\n      });\n    }\n    filtrarHorasDisponibles() {\n      const fecha = this.form.get('Fecha')?.value;\n      const idProfesional = this.form.get('ID_Profesional')?.value;\n      const idPaciente = this.form.get('ID_Paciente')?.value;\n      if (!fecha || !idProfesional || !idPaciente) {\n        this.horasFiltradas = [];\n        return;\n      }\n      const fechaStr = this.formatearFecha(fecha);\n      this.horasFiltradas = this.horasDisponibles.filter(hora => {\n        return this.verificarDisponibilidad(hora, fechaStr, idProfesional, idPaciente);\n      });\n      this.form.get('Hora')?.setValue(null);\n      this.cdr.detectChanges();\n    }\n    verificarDisponibilidad(hora, fecha, _idProfesional, _idPaciente) {\n      // No permitir turnos en el pasado\n      const hoy = new Date();\n      const fechaHora = new Date(`${fecha}T${hora}`);\n      if (fechaHora < hoy) return false;\n      // Obtener nombre completo del paciente y profesional seleccionados\n      const pacienteSeleccionado = this.form.get('pacienteCtrl')?.value;\n      const profesionalSeleccionado = this.form.get('profesionalCtrl')?.value;\n      const nombrePaciente = pacienteSeleccionado?.Nombre ? `${pacienteSeleccionado.Nombre} ${pacienteSeleccionado.Apellido || ''}`.trim() : pacienteSeleccionado?.nombre ? `${pacienteSeleccionado.nombre} ${pacienteSeleccionado.apellido || ''}`.trim() : '';\n      const nombreProfesional = profesionalSeleccionado?.Nombre ? `${profesionalSeleccionado.Nombre} ${profesionalSeleccionado.Apellido || ''}`.trim() : profesionalSeleccionado?.nombre ? `${profesionalSeleccionado.nombre} ${profesionalSeleccionado.apellido || ''}`.trim() : '';\n      const turnosConflictivos = this.turnos.filter(t => {\n        const horaTurno = (t.Hora || '').toString().substring(0, 5);\n        const horaSeleccionada = hora.toString().substring(0, 5);\n        return t.Fecha === fecha && horaTurno === horaSeleccionada && (t.Paciente === nombrePaciente || t.Profesional === nombreProfesional) && t.Estado === 'Agendado';\n      });\n      if (turnosConflictivos.length > 0) {\n        console.log('⚠️ Turno conflictivo encontrado:', turnosConflictivos[0]);\n      }\n      console.log('🔍 Verificando disponibilidad:', {\n        hora,\n        fecha,\n        nombrePaciente,\n        nombreProfesional,\n        cantidadConflictivos: turnosConflictivos.length,\n        turnosConflictivos: turnosConflictivos.map(t => ({\n          ID: t.ID,\n          Paciente: t.Paciente,\n          Profesional: t.Profesional,\n          Estado: t.Estado,\n          Fecha: t.Fecha,\n          Hora: t.Hora\n        }))\n      });\n      return turnosConflictivos.length === 0;\n    }\n    formatearFecha(date) {\n      if (!date) return '';\n      const d = new Date(date);\n      return d.toISOString().split('T')[0];\n    }\n    guardarTurno() {\n      if (this.form.invalid) {\n        this.snackBar.open('Por favor completá todos los campos requeridos.', 'Cerrar', {\n          duration: 3000\n        });\n        return;\n      }\n      const raw = this.form.getRawValue();\n      const nuevoTurno = {\n        ID_Paciente: raw.ID_Paciente,\n        ID_Profesional: raw.ID_Profesional,\n        ID_Especialidad: raw.ID_Especialidad,\n        Fecha: this.formatearFecha(raw.Fecha),\n        Hora: raw.Hora,\n        ID_EstadoTurno: 1\n      };\n      if (this.modoEdicion && this.idTurnoEditar) {\n        this.turnosService.actualizarTurno(this.idTurnoEditar, nuevoTurno).subscribe({\n          next: () => {\n            this.snackBar.open('Turno editado con éxito', 'Cerrar', {\n              duration: 3000\n            });\n            this.router.navigate(['/turnos']);\n          },\n          error: () => {\n            this.snackBar.open('Error al editar el turno', 'Cerrar', {\n              duration: 3000\n            });\n          }\n        });\n      } else {\n        this.turnosService.crearTurno(nuevoTurno).subscribe({\n          next: () => {\n            this.snackBar.open('Turno guardado con éxito', 'Cerrar', {\n              duration: 3000\n            });\n            this.router.navigate(['/turnos']);\n          },\n          error: () => {\n            this.snackBar.open('Error al guardar el turno', 'Cerrar', {\n              duration: 3000\n            });\n          }\n        });\n      }\n    }\n    cancelar() {\n      this.router.navigate(['/turnos']);\n    }\n    displayPaciente(paciente) {\n      if (!paciente) return '';\n      if (typeof paciente === 'string') return paciente;\n      return paciente.Nombre ? `${paciente.Nombre} ${paciente.Apellido || ''}`.trim() : '';\n    }\n    displayProfesional(profesional) {\n      return profesional && profesional.nombre ? profesional.nombre : '';\n    }\n    get pacienteCtrl() {\n      return this.form.get('pacienteCtrl');\n    }\n    get profesionalCtrl() {\n      return this.form.get('profesionalCtrl');\n    }\n    estaOcupado(hora) {\n      const fecha = this.form.get('Fecha')?.value;\n      const idProfesional = this.form.get('ID_Profesional')?.value;\n      const idPaciente = this.form.get('ID_Paciente')?.value;\n      console.log('🔍 Verificando si hora está ocupada:', {\n        hora,\n        fecha,\n        idProfesional,\n        idPaciente,\n        turnos: this.turnos.length\n      });\n      if (!fecha || !idProfesional || !idPaciente) {\n        console.log('❌ Faltan datos para validar disponibilidad');\n        return false;\n      }\n      const fechaStr = this.formatearFecha(fecha);\n      const ocupado = !this.verificarDisponibilidad(hora, fechaStr, idProfesional, idPaciente);\n      console.log(`⏰ Hora ${hora} está ocupada: ${ocupado}`);\n      return ocupado;\n    }\n    cargarPacientes() {\n      this.pacienteService.obtenerPacientes().subscribe({\n        next: data => {\n          this.pacientes = data;\n          this.pacientesCargados = true;\n          this.cdr.detectChanges();\n        },\n        error: err => {\n          this.snackBar.open('Error al cargar pacientes.', 'Cerrar', {\n            duration: 3000\n          });\n        }\n      });\n    }\n    cargarProfesionales() {\n      this.turnosService.obtenerProfesionales().subscribe({\n        next: data => {\n          this.profesionales = data;\n          if (this.modoEdicion && this.turnoParaEditar) {\n            const pacienteObj = this.pacientes.find(p => p.ID === this.turnoParaEditar.ID_Paciente) || '';\n            const profesionalObj = this.profesionales.find(p => p.ID === this.turnoParaEditar.ID_Profesional) || '';\n            let horaValue = this.turnoParaEditar.Hora;\n            if (typeof horaValue === 'number') {\n              const totalMinutes = Math.floor(horaValue / 60);\n              const h = Math.floor(totalMinutes / 60).toString().padStart(2, '0');\n              const m = (totalMinutes % 60).toString().padStart(2, '0');\n              horaValue = `${h}:${m}`;\n            } else if (typeof horaValue === 'string') {\n              horaValue = horaValue.substring(0, 5);\n            }\n            this.form.patchValue({\n              ID_Paciente: this.turnoParaEditar.ID_Paciente,\n              pacienteCtrl: pacienteObj,\n              ID_Profesional: this.turnoParaEditar.ID_Profesional,\n              profesionalCtrl: profesionalObj,\n              ID_Especialidad: this.turnoParaEditar.ID_Especialidad,\n              Fecha: new Date(this.turnoParaEditar.Fecha),\n              Hora: horaValue\n            }, {\n              emitEvent: false\n            });\n            this.form.get('ID_Paciente')?.disable();\n            this.form.get('pacienteCtrl')?.disable();\n            this.form.get('ID_Profesional')?.disable();\n            this.form.get('profesionalCtrl')?.disable();\n            this.form.get('ID_Especialidad')?.disable();\n            // Especialidad\n            this.especialidadesFiltradas = [{\n              ID: this.turnoParaEditar.ID_Especialidad,\n              Nombre: this.turnoParaEditar.Especialidad\n            }];\n          }\n          this.profesionalesCargados = true;\n          this.cdr.detectChanges();\n        },\n        error: err => {\n          this.snackBar.open('Error al cargar profesionales.', 'Cerrar', {\n            duration: 3000\n          });\n        }\n      });\n    }\n    cargarEspecialidadesPorProfesional(idProfesional) {\n      if (!idProfesional) {\n        this.especialidadesFiltradas = [];\n        this.especialidadesCargadas = true;\n        return;\n      }\n      this.turnosService.obtenerEspecialidadesPorProfesional(idProfesional).subscribe(data => {\n        this.especialidadesFiltradas = data;\n        this.especialidadesCargadas = true;\n        // Patch directo al terminar de cargar especialidades\n        if (this.modoEdicion && this.turnoParaEditar) {\n          const idEspecialidad = this.turnoParaEditar.ID_Especialidad;\n          const especialidadExiste = this.especialidadesFiltradas.some(e => e.ID === idEspecialidad);\n          if (!especialidadExiste) {\n            console.warn(`⚠️ La especialidad con ID ${idEspecialidad} no está entre las especialidades cargadas para el profesional.`);\n            console.warn('🧪 Especialidades disponibles:', this.especialidadesFiltradas);\n          }\n          this.form.patchValue({\n            ID_Paciente: this.turnoParaEditar.ID_Paciente,\n            pacienteCtrl: this.pacientes.find(p => p.ID === this.turnoParaEditar.ID_Paciente) || '',\n            ID_Profesional: this.turnoParaEditar.ID_Profesional,\n            profesionalCtrl: this.profesionales.find(p => p.ID === this.turnoParaEditar.ID_Profesional) || '',\n            ID_Especialidad: idEspecialidad,\n            Fecha: new Date(this.turnoParaEditar.Fecha),\n            Hora: (this.turnoParaEditar.Hora || '').substring(0, 5)\n          });\n          this.form.get('ID_Paciente')?.disable();\n          this.form.get('pacienteCtrl')?.disable();\n          this.form.get('ID_Profesional')?.disable();\n          this.form.get('profesionalCtrl')?.disable();\n          this.form.get('ID_Especialidad')?.disable();\n        }\n        this.cdr.detectChanges();\n      });\n    }\n    static {\n      this.ɵfac = function NuevoTurnoComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || NuevoTurnoComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TurnosService), i0.ɵɵdirectiveInject(i3.PacienteService), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(i5.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i5.ActivatedRoute));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: NuevoTurnoComponent,\n        selectors: [[\"app-nuevo-turno\"]],\n        decls: 65,\n        vars: 23,\n        consts: [[\"autoPaciente\", \"matAutocomplete\"], [\"autoProfesional\", \"matAutocomplete\"], [\"picker\", \"\"], [1, \"nuevo-turno-bg\"], [1, \"nuevo-turno-card\"], [1, \"nuevo-turno-header\"], [\"mat-dialog-title\", \"\"], [1, \"nuevo-turno-subtitle\"], [1, \"nuevo-turno-form\", \"grid-form\", 3, \"ngSubmit\", \"formGroup\"], [1, \"form-row\", \"row-2-cols\", \"wide-cols\"], [\"appearance\", \"outline\", 1, \"form-field\"], [\"matPrefix\", \"\"], [\"type\", \"text\", \"matInput\", \"\", 3, \"formControl\", \"matAutocomplete\", \"disabled\"], [3, \"optionSelected\", \"displayWith\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"hidden\", \"formControlName\", \"ID_Paciente\"], [\"type\", \"hidden\", \"formControlName\", \"ID_Profesional\"], [1, \"form-row\", \"row-2-cols\"], [\"formControlName\", \"ID_Especialidad\", \"required\", \"\", 3, \"disabled\"], [\"matInput\", \"\", \"formControlName\", \"Fecha\", \"required\", \"\", 3, \"matDatepicker\", \"min\"], [\"matSuffix\", \"\", 3, \"for\"], [1, \"form-row\", \"hora-row-right\"], [1, \"hora-container\"], [\"appearance\", \"outline\", 1, \"form-field\", \"hora-field\"], [\"formControlName\", \"Hora\", \"required\", \"\"], [3, \"value\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-actions\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"btn-guardar\", 3, \"disabled\"], [\"mat-stroked-button\", \"\", \"color\", \"warn\", \"type\", \"button\", 1, \"btn-cancelar\", 3, \"click\"], [3, \"value\"], [3, \"value\", \"disabled\"]],\n        template: function NuevoTurnoComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 3)(1, \"mat-card\", 4)(2, \"div\", 5)(3, \"h2\", 6);\n            i0.ɵɵtext(4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"div\", 7);\n            i0.ɵɵtext(6, \"Agend\\u00E1 un turno para un paciente\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(7, \"mat-card-content\")(8, \"form\", 8);\n            i0.ɵɵlistener(\"ngSubmit\", function NuevoTurnoComponent_Template_form_ngSubmit_8_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.guardarTurno());\n            });\n            i0.ɵɵelementStart(9, \"div\", 9)(10, \"mat-form-field\", 10)(11, \"mat-label\");\n            i0.ɵɵtext(12, \"Paciente\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"mat-icon\", 11);\n            i0.ɵɵtext(14, \"person\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(15, \"input\", 12);\n            i0.ɵɵelementStart(16, \"mat-autocomplete\", 13, 0);\n            i0.ɵɵlistener(\"optionSelected\", function NuevoTurnoComponent_Template_mat_autocomplete_optionSelected_16_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.seleccionarPaciente($event.option.value));\n            });\n            i0.ɵɵtemplate(18, NuevoTurnoComponent_mat_option_18_Template, 2, 3, \"mat-option\", 14);\n            i0.ɵɵpipe(19, \"async\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(20, \"input\", 15);\n            i0.ɵɵelementStart(21, \"mat-form-field\", 10)(22, \"mat-label\");\n            i0.ɵɵtext(23, \"Profesional\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(24, \"mat-icon\", 11);\n            i0.ɵɵtext(25, \"medical_services\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(26, \"input\", 12);\n            i0.ɵɵelementStart(27, \"mat-autocomplete\", 13, 1);\n            i0.ɵɵlistener(\"optionSelected\", function NuevoTurnoComponent_Template_mat_autocomplete_optionSelected_27_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.seleccionarProfesional($event.option.value));\n            });\n            i0.ɵɵtemplate(29, NuevoTurnoComponent_mat_option_29_Template, 2, 3, \"mat-option\", 14);\n            i0.ɵɵpipe(30, \"async\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(31, \"input\", 16);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(32, \"div\", 17)(33, \"mat-form-field\", 10)(34, \"mat-label\");\n            i0.ɵɵtext(35, \"Especialidad\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(36, \"mat-select\", 18);\n            i0.ɵɵtemplate(37, NuevoTurnoComponent_mat_option_37_Template, 2, 2, \"mat-option\", 14);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(38, \"mat-form-field\", 10)(39, \"mat-label\");\n            i0.ɵɵtext(40, \"Fecha\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(41, \"mat-icon\", 11);\n            i0.ɵɵtext(42, \"event\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(43, \"input\", 19)(44, \"mat-datepicker-toggle\", 20)(45, \"mat-datepicker\", null, 2);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(47, \"div\", 21)(48, \"div\", 22)(49, \"mat-form-field\", 23)(50, \"mat-label\");\n            i0.ɵɵtext(51, \"Hora\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(52, \"mat-icon\", 11);\n            i0.ɵɵtext(53, \"schedule\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(54, \"mat-select\", 24);\n            i0.ɵɵtemplate(55, NuevoTurnoComponent_mat_option_55_Template, 2, 3, \"mat-option\", 25);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(56, \"div\", 26)(57, \"button\", 27)(58, \"mat-icon\");\n            i0.ɵɵtext(59, \"check_circle\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(60, \" Guardar Turno \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(61, \"button\", 28);\n            i0.ɵɵlistener(\"click\", function NuevoTurnoComponent_Template_button_click_61_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.cancelar());\n            });\n            i0.ɵɵelementStart(62, \"mat-icon\");\n            i0.ɵɵtext(63, \"cancel\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(64, \" Cancelar \");\n            i0.ɵɵelementEnd()()()()()();\n          }\n          if (rf & 2) {\n            const autoPaciente_r7 = i0.ɵɵreference(17);\n            const autoProfesional_r8 = i0.ɵɵreference(28);\n            const picker_r9 = i0.ɵɵreference(46);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate(ctx.modoEdicion ? \"Editar Turno\" : \"Nuevo Turno\");\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"formGroup\", ctx.form);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"formControl\", ctx.pacienteCtrl)(\"matAutocomplete\", autoPaciente_r7)(\"disabled\", ctx.modoEdicion);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"displayWith\", ctx.displayPaciente);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(19, 19, ctx.filteredPacientes));\n            i0.ɵɵadvance(8);\n            i0.ɵɵproperty(\"formControl\", ctx.profesionalCtrl)(\"matAutocomplete\", autoProfesional_r8)(\"disabled\", ctx.modoEdicion);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"displayWith\", ctx.displayProfesional);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(30, 21, ctx.filteredProfesionales));\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"disabled\", ctx.modoEdicion);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngForOf\", ctx.especialidadesFiltradas);\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"matDatepicker\", picker_r9)(\"min\", ctx.today);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"for\", picker_r9);\n            i0.ɵɵadvance(11);\n            i0.ɵɵproperty(\"ngForOf\", ctx.horasDisponibles);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n          }\n        },\n        dependencies: [CommonModule, i6.NgForOf, i6.AsyncPipe, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormControlDirective, i1.FormGroupDirective, i1.FormControlName, MatFormFieldModule, i7.MatFormField, i7.MatLabel, i7.MatPrefix, i7.MatSuffix, MatSelectModule, i8.MatSelect, i9.MatOption, MatInputModule, i10.MatInput, MatButtonModule, i11.MatButton, MatCardModule, i12.MatCard, i12.MatCardContent, MatDatepickerModule, i13.MatDatepicker, i13.MatDatepickerInput, i13.MatDatepickerToggle, MatNativeDateModule, MatSnackBarModule, MatAutocompleteModule, i9.MatAutocomplete, i9.MatAutocompleteTrigger, MatIconModule, i14.MatIcon],\n        styles: [\".nuevo-turno-bg[_ngcontent-%COMP%]{min-height:100vh;background:#f5f1eb;display:flex;align-items:center;justify-content:center}.nuevo-turno-card[_ngcontent-%COMP%]{width:100%;max-width:900px;border-radius:22px;box-shadow:0 6px 32px #aa262b1a,0 1.5px 6px #2c2c2c14;background:#fff;padding:40px 40px 32px;margin:18px 0 32px}.nuevo-turno-header[_ngcontent-%COMP%]{text-align:left;margin-bottom:18px}.nuevo-turno-title[_ngcontent-%COMP%]{font-size:2.2rem;font-weight:800;color:#aa262b;margin-bottom:12px;letter-spacing:-1px}.nuevo-turno-subtitle[_ngcontent-%COMP%]{font-size:1.08rem;color:#7a7a7a;margin-bottom:18px;margin-top:0}.nuevo-turno-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:22px}.form-field[_ngcontent-%COMP%]{width:100%;font-size:1.13rem}.mat-form-field[_ngcontent-%COMP%]{background:#f5f1eb;border-radius:8px}.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-outline[_ngcontent-%COMP%], .mat-form-field.mat-focused[_ngcontent-%COMP%]   .mat-form-field-outline[_ngcontent-%COMP%]{color:#aa262b}.mat-form-field.mat-focused[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%]{color:#aa262b!important}.mat-form-field.mat-focused[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{color:#aa262b}.mat-form-field-infix[_ngcontent-%COMP%]{min-height:56px!important;font-size:1.13rem!important}.mat-input-element[_ngcontent-%COMP%], .mat-select-value-text[_ngcontent-%COMP%]{font-size:1.13rem!important}.form-actions[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;gap:16px;margin-top:18px}.btn-guardar[_ngcontent-%COMP%]{font-weight:700;border-radius:8px;background:#aa262b;color:#fff;box-shadow:0 2px 8px #aa262b14;transition:background .2s}.btn-guardar[_ngcontent-%COMP%]:hover{background:#d32f2f}.btn-cancelar[_ngcontent-%COMP%]{font-weight:600;border-radius:8px;color:#aa262b;border-color:#aa262b}.grid-form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:0}.form-row[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr 1fr;gap:32px;margin-bottom:22px}.form-row[_ngcontent-%COMP%]:last-child{margin-bottom:0}.form-row[_ngcontent-%COMP%]:nth-child(3){grid-template-columns:1fr}.form-row.hora-row[_ngcontent-%COMP%]{display:flex;justify-content:center;margin-bottom:22px}.form-row.hora-row[_ngcontent-%COMP%]   .form-field[_ngcontent-%COMP%]{max-width:200px;min-width:160px;width:100%}.row-2-cols[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr 1fr;gap:32px;margin-bottom:22px}.row-3-cols[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr 1fr 1fr;gap:32px;margin-bottom:22px}.wide-cols[_ngcontent-%COMP%]{grid-template-columns:1fr 1fr}.hora-row-right[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr 1fr 1fr;gap:32px;margin-bottom:22px}.hora-container[_ngcontent-%COMP%]{width:100%;max-width:none}.hora-field[_ngcontent-%COMP%]{width:100%;min-width:0;max-width:none}@media (max-width: 1100px){.nuevo-turno-card[_ngcontent-%COMP%]{max-width:98vw;padding:18px 4vw}.wide-cols[_ngcontent-%COMP%], .row-2-cols[_ngcontent-%COMP%], .hora-row-right[_ngcontent-%COMP%]{grid-template-columns:1fr;gap:0}}@media (max-width: 600px){.nuevo-turno-card[_ngcontent-%COMP%]{max-width:98vw;padding:18px 4vw}.nuevo-turno-title[_ngcontent-%COMP%]{font-size:1.4rem}}\"]\n      });\n    }\n  }\n  return NuevoTurnoComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
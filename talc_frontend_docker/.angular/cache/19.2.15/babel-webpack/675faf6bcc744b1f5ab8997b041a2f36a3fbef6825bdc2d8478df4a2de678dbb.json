{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ElementRef, ChangeDetectorRef, Component, Inject, Input, NgModule, Optional } from '@angular/core';\nconst _c0 = [\"*\"];\nclass OptionsProvider {\n  constructor(options) {\n    this.options = options;\n  }\n}\nfunction uppercamelcase(str) {\n  return str.toLowerCase().replace(/(?:^\\w|[A-Z]|\\b\\w)/g, firstLetter => {\n    return firstLetter.toUpperCase();\n  }).replace(/[-_]/g, '');\n}\nlet TablerIconComponent = /*#__PURE__*/(() => {\n  class TablerIconComponent {\n    constructor(elem, changeDetector, options) {\n      this.elem = elem;\n      this.changeDetector = changeDetector;\n      this.options = options;\n    }\n    ngOnChanges(changes) {\n      // icons are provided as an array of objects because of \"multi: true\"\n      const icons = Object.assign({}, ...this.options.map(option => option.icons));\n      const svg = icons[`Icon${uppercamelcase(changes.name.currentValue)}`] ?? '';\n      if (!svg && !this.options.some(option => option.ignoreWarnings)) {\n        console.warn(`Tabler Icon not found: ${changes.name.currentValue}\\n` + `Refer to documentation on https://github.com/pierreavn/angular-tabler-icons`);\n      }\n      this.elem.nativeElement.innerHTML = svg;\n      this.changeDetector.markForCheck();\n    }\n  }\n  TablerIconComponent.ɵfac = function TablerIconComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TablerIconComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(OptionsProvider));\n  };\n  TablerIconComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TablerIconComponent,\n    selectors: [[\"i-tabler\"], [\"tabler-icon\"]],\n    inputs: {\n      name: \"name\"\n    },\n    standalone: false,\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function TablerIconComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}\"]\n  });\n  return TablerIconComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TablerIconsModule = /*#__PURE__*/(() => {\n  class TablerIconsModule {\n    constructor(options) {\n      this.options = options;\n      if (!this.options) {\n        throw new Error(`No icon provided. Make sure to use 'TablerIconsModule.pick({ ... })' when importing the module\\n` + `Refer to documentation on https://github.com/pierreavn/angular-tabler-icons`);\n      }\n    }\n    /**\n     * Initialize module with given icons and options\n     * @param icons\n     * @returns Module with options\n     */\n    static pick(icons, options) {\n      return {\n        ngModule: TablerIconsModule,\n        providers: [{\n          provide: OptionsProvider,\n          useValue: {\n            icons,\n            ...options\n          },\n          multi: true\n        }]\n      };\n    }\n  }\n  TablerIconsModule.ɵfac = function TablerIconsModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TablerIconsModule)(i0.ɵɵinject(OptionsProvider, 8));\n  };\n  TablerIconsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: TablerIconsModule\n  });\n  TablerIconsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return TablerIconsModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass TablerIconsProvider {\n  static pick(icons, options) {\n    return {\n      provide: OptionsProvider,\n      useValue: {\n        icons,\n        ...options\n      },\n      multi: true\n    };\n  }\n}\n\n/*\n * Public API Surface of angular-tabler-icons\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TablerIconComponent, TablerIconsModule, TablerIconsProvider };\n//# sourceMappingURL=angular-tabler-icons.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
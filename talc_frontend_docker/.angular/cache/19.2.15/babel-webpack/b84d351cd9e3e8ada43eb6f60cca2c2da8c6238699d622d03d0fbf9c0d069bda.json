{"ast":null,"code":"import { NgApexchartsModule } from 'ng-apexcharts';\nimport { FormControl } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/turnos.service\";\nimport * as i2 from \"ng-apexcharts\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/datepicker\";\nimport * as i6 from \"@angular/forms\";\nexport let ReportesComponent = /*#__PURE__*/(() => {\n  class ReportesComponent {\n    constructor(turnosService) {\n      this.turnosService = turnosService;\n      this.fechaDesde = new FormControl();\n      this.fechaHasta = new FormControl();\n      this.allTurnos = [];\n      this.chartOptions = {\n        series: [0, 0, 0, 0],\n        chart: {\n          type: 'donut',\n          height: 350\n        },\n        labels: ['Asistidos', 'Cancelados', 'Ausentes', 'Agendados'],\n        responsive: [{\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 200\n            },\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }],\n        legend: {\n          position: 'bottom'\n        }\n      };\n      this.lineChartOptions = {\n        series: [],\n        chart: {\n          height: 300,\n          type: 'line',\n          fontFamily: 'DM Sans,sans-serif',\n          foreColor: '#a1aab2',\n          toolbar: {\n            show: false\n          }\n        },\n        xaxis: {\n          type: 'category',\n          categories: []\n        },\n        yaxis: {},\n        stroke: {\n          curve: 'straight',\n          width: 2\n        },\n        grid: {\n          show: true,\n          strokeDashArray: 0,\n          borderColor: 'rgba(0,0,0,0.1)'\n        },\n        tooltip: {\n          theme: 'dark'\n        },\n        colors: ['#06d79c', '#398bf7', '#FFAE1F', '#e53935']\n      };\n      this.barChartOptions = {\n        series: [],\n        chart: {\n          height: 400,\n          width: 500,\n          type: 'bar',\n          fontFamily: 'DM Sans,sans-serif',\n          foreColor: '#a1aab2',\n          stacked: false,\n          toolbar: {\n            show: false\n          }\n        },\n        xaxis: {\n          type: 'category',\n          categories: []\n        },\n        yaxis: {},\n        plotOptions: {\n          bar: {\n            columnWidth: '40%',\n            barHeight: '40%'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        grid: {\n          show: true,\n          strokeDashArray: 0,\n          borderColor: 'rgba(0,0,0,0.1)'\n        },\n        colors: ['#398bf7'],\n        legend: {\n          show: false\n        },\n        tooltip: {\n          theme: 'dark'\n        }\n      };\n      this.profesionalesPieOptions = {\n        series: [],\n        chart: {\n          type: 'donut',\n          height: 350\n        },\n        labels: [],\n        colors: ['#5D87FF',\n        // azul\n        '#49BEFF',\n        // celeste\n        '#FFAE1F',\n        // naranja\n        '#13DEB9',\n        // turquesa\n        '#FA896B',\n        // coral\n        '#6C5FFC',\n        // violeta\n        '#FF5CA8',\n        // rosa\n        '#81D4FA',\n        // azul claro\n        '#A7FFEB',\n        // verde agua\n        '#FFD600' // amarillo\n        ],\n        responsive: [{\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 200\n            },\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }],\n        legend: {\n          position: 'bottom'\n        }\n      };\n      this.especialidadesPieOptions = {\n        series: [],\n        chart: {\n          type: 'donut',\n          height: 350\n        },\n        labels: [],\n        colors: [],\n        responsive: [{\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 200\n            },\n            legend: {\n              position: 'bottom'\n            }\n          }\n        }],\n        legend: {\n          position: 'bottom'\n        }\n      };\n      this.asistenciaProfesionalOptions = {\n        series: [],\n        chart: {\n          height: 500,\n          type: 'bar',\n          stacked: true,\n          stackType: '100%',\n          fontFamily: 'DM Sans,sans-serif',\n          foreColor: '#a1aab2',\n          toolbar: {\n            show: false\n          }\n        },\n        xaxis: {\n          type: 'category',\n          categories: []\n        },\n        yaxis: {},\n        plotOptions: {\n          bar: {\n            columnWidth: '25%',\n            barHeight: '40%'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        grid: {\n          show: true,\n          strokeDashArray: 0,\n          borderColor: 'rgba(0,0,0,0.1)'\n        },\n        colors: ['#06d79c', '#e53935', '#FFAE1F', '#398bf7'],\n        legend: {\n          show: true,\n          position: 'bottom'\n        },\n        tooltip: {\n          theme: 'dark'\n        }\n      };\n      this.horarioBarOptions = {\n        series: [],\n        chart: {\n          height: 300,\n          type: 'bar',\n          fontFamily: 'DM Sans,sans-serif',\n          foreColor: '#a1aab2',\n          stacked: false,\n          toolbar: {\n            show: false\n          }\n        },\n        xaxis: {\n          type: 'category',\n          categories: []\n        },\n        yaxis: {},\n        plotOptions: {\n          bar: {\n            columnWidth: '40%',\n            barHeight: '40%'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        grid: {\n          show: true,\n          strokeDashArray: 0,\n          borderColor: 'rgba(0,0,0,0.1)'\n        },\n        colors: ['#FFAE1F'],\n        legend: {\n          show: false\n        },\n        tooltip: {\n          theme: 'dark'\n        }\n      };\n      this.ausentismoLineOptions = {\n        series: [],\n        chart: {\n          height: 300,\n          type: 'line',\n          fontFamily: 'DM Sans,sans-serif',\n          foreColor: '#a1aab2',\n          toolbar: {\n            show: false\n          }\n        },\n        xaxis: {\n          type: 'category',\n          categories: []\n        },\n        yaxis: {\n          min: 0,\n          max: 100,\n          labels: {\n            formatter: val => val + '%'\n          }\n        },\n        stroke: {\n          curve: 'straight',\n          width: 2\n        },\n        grid: {\n          show: true,\n          strokeDashArray: 0,\n          borderColor: 'rgba(0,0,0,0.1)'\n        },\n        tooltip: {\n          theme: 'dark'\n        },\n        colors: ['#e53935']\n      };\n      this.programadosVsEfectivosOptions = {\n        series: [],\n        chart: {\n          height: 300,\n          type: 'line',\n          fontFamily: 'DM Sans,sans-serif',\n          foreColor: '#a1aab2',\n          toolbar: {\n            show: false\n          }\n        },\n        xaxis: {\n          type: 'category',\n          categories: []\n        },\n        yaxis: {},\n        stroke: {\n          curve: 'straight',\n          width: 2\n        },\n        grid: {\n          show: true,\n          strokeDashArray: 0,\n          borderColor: 'rgba(0,0,0,0.1)'\n        },\n        tooltip: {\n          theme: 'dark'\n        },\n        colors: ['#398bf7', '#06d79c']\n      };\n    }\n    ngOnInit() {\n      this.turnosService.obtenerTurnos().subscribe(turnos => {\n        this.allTurnos = turnos;\n        this.actualizarGraficosPorRango();\n      });\n      this.fechaDesde.valueChanges.subscribe(() => this.actualizarGraficosPorRango());\n      this.fechaHasta.valueChanges.subscribe(() => this.actualizarGraficosPorRango());\n    }\n    actualizarGraficosPorRango() {\n      const desde = this.fechaDesde.value ? new Date(this.fechaDesde.value) : null;\n      const hasta = this.fechaHasta.value ? new Date(this.fechaHasta.value) : null;\n      let turnosFiltrados = this.allTurnos;\n      if (desde) {\n        turnosFiltrados = turnosFiltrados.filter(t => new Date(t.Fecha) >= desde);\n      }\n      if (hasta) {\n        turnosFiltrados = turnosFiltrados.filter(t => new Date(t.Fecha) <= hasta);\n      }\n      // Donut chart (por estado)\n      const counts = {\n        Asistidos: 0,\n        Cancelados: 0,\n        Ausentes: 0,\n        Agendados: 0\n      };\n      turnosFiltrados.forEach(turno => {\n        const estado = (turno.Estado || '').toLowerCase();\n        if (estado === 'asistido') counts.Asistidos++;else if (estado === 'cancelado') counts.Cancelados++;else if (estado === 'ausente') counts.Ausentes++;else if (estado === 'agendado') counts.Agendados++;\n      });\n      this.chartOptions.series = [counts.Asistidos, counts.Cancelados, counts.Ausentes, counts.Agendados];\n      // Bar chart (turnos por profesional)\n      const profesionales = {};\n      turnosFiltrados.forEach(turno => {\n        if (turno.Profesional) {\n          profesionales[turno.Profesional] = (profesionales[turno.Profesional] || 0) + 1;\n        }\n      });\n      const profEntries = Object.entries(profesionales).sort((a, b) => b[1] - a[1]).slice(0, 10);\n      const profNames = profEntries.map(([name]) => name);\n      const profCounts = profEntries.map(([, count]) => count);\n      this.barChartOptions.series = [{\n        name: 'Turnos',\n        data: profCounts\n      }];\n      this.barChartOptions.xaxis = {\n        ...this.barChartOptions.xaxis,\n        categories: profNames,\n        labels: {\n          show: true,\n          rotate: -45,\n          style: {\n            fontSize: '12px'\n          },\n          formatter: val => val\n        }\n      };\n      // Pie chart (turnos por profesional)\n      function generateUniqueColors(n) {\n        return Array.from({\n          length: n\n        }, (_, i) => `hsl(${Math.round(360 * i / n)}, 70%, 55%)`);\n      }\n      this.profesionalesPieOptions.series = profCounts;\n      this.profesionalesPieOptions.labels = profNames;\n      this.profesionalesPieOptions.colors = generateUniqueColors(profNames.length);\n      // Pie chart (turnos por especialidad)\n      const especialidades = {};\n      turnosFiltrados.forEach(turno => {\n        if (turno.Especialidad) {\n          especialidades[turno.Especialidad] = (especialidades[turno.Especialidad] || 0) + 1;\n        }\n      });\n      const espEntries = Object.entries(especialidades).sort((a, b) => b[1] - a[1]).slice(0, 10);\n      const espNames = espEntries.map(([name]) => name);\n      const espCounts = espEntries.map(([, count]) => count);\n      this.especialidadesPieOptions.series = espCounts;\n      this.especialidadesPieOptions.labels = espNames;\n      this.especialidadesPieOptions.colors = Array.isArray(espNames) && espNames.length > 0 ? generateUniqueColors(espNames.length) : [];\n      // Barras apiladas: porcentaje de asistencia por profesional\n      const estadosAsistencia = ['Asistido', 'Cancelado', 'Ausente', 'Agendado'];\n      // Filtrar y limpiar nombres de profesionales\n      const topProfesionales = profNames.map(name => {\n        if (!name || typeof name !== 'string' || name.trim() === '') return 'Sin nombre';\n        return name;\n      });\n      console.log('Profesionales eje X:', topProfesionales);\n      const seriesAsistencia = estadosAsistencia.map(estado => ({\n        name: estado,\n        data: topProfesionales.map(prof => turnosFiltrados.filter(t => t.Profesional === prof && t.Estado === estado).length)\n      }));\n      this.asistenciaProfesionalOptions.series = seriesAsistencia;\n      this.asistenciaProfesionalOptions.xaxis = {\n        type: 'category',\n        categories: topProfesionales,\n        labels: {\n          show: true,\n          rotate: -60,\n          style: {\n            fontSize: '12px'\n          },\n          formatter: val => val\n        }\n      };\n      this.asistenciaProfesionalOptions.chart.width = 1100;\n    }\n    limpiarFechas() {\n      this.fechaDesde.setValue(null);\n      this.fechaHasta.setValue(null);\n    }\n    static {\n      this.ɵfac = function ReportesComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ReportesComponent)(i0.ɵɵdirectiveInject(i1.TurnosService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ReportesComponent,\n        selectors: [[\"app-reportes\"]],\n        decls: 42,\n        vars: 41,\n        consts: [[\"pickerDesde\", \"\"], [\"pickerHasta\", \"\"], [1, \"reportes-container\"], [1, \"titulo-reportes\", 2, \"margin-bottom\", \"2.5rem\"], [2, \"display\", \"flex\", \"align-items\", \"center\", \"gap\", \"1rem\", \"margin-bottom\", \"2rem\"], [\"appearance\", \"outline\"], [\"matInput\", \"\", 3, \"matDatepicker\", \"formControl\"], [\"matSuffix\", \"\", 3, \"for\"], [\"mat-raised-button\", \"\", 1, \"new-appointment-btn\", 3, \"click\"], [1, \"graficos-row\", 2, \"display\", \"flex\", \"flex-wrap\", \"wrap\", \"gap\", \"2rem\", \"justify-content\", \"center\"], [2, \"flex\", \"1 1 400px\", \"min-width\", \"320px\", \"max-width\", \"500px\"], [3, \"series\", \"chart\", \"labels\", \"responsive\", \"legend\"], [1, \"graficos-row\", 2, \"display\", \"flex\", \"flex-wrap\", \"wrap\", \"gap\", \"2rem\", \"justify-content\", \"center\", \"margin-top\", \"3rem\"], [2, \"flex\", \"1 1 400px\", \"min-width\", \"320px\", \"max-width\", \"600px\"], [3, \"series\", \"chart\", \"xaxis\", \"yaxis\", \"plotOptions\", \"dataLabels\", \"grid\", \"colors\", \"legend\", \"tooltip\"], [2, \"max-width\", \"1100px\", \"margin\", \"2rem auto\"]],\n        template: function ReportesComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 2)(1, \"h1\", 3);\n            i0.ɵɵtext(2, \"Reportes y Estad\\u00EDsticas de Turnos\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 4)(4, \"mat-form-field\", 5)(5, \"mat-label\");\n            i0.ɵɵtext(6, \"Desde\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(7, \"input\", 6)(8, \"mat-datepicker-toggle\", 7)(9, \"mat-datepicker\", null, 0);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"mat-form-field\", 5)(12, \"mat-label\");\n            i0.ɵɵtext(13, \"Hasta\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(14, \"input\", 6)(15, \"mat-datepicker-toggle\", 7)(16, \"mat-datepicker\", null, 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(18, \"button\", 8);\n            i0.ɵɵlistener(\"click\", function ReportesComponent_Template_button_click_18_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.limpiarFechas());\n            });\n            i0.ɵɵtext(19, \"Limpiar\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(20, \"div\", 9)(21, \"div\", 10)(22, \"h3\");\n            i0.ɵɵtext(23, \"Turnos por estado de asistencia\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(24, \"apx-chart\", 11);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(25, \"div\", 10)(26, \"h3\");\n            i0.ɵɵtext(27, \"Turnos por especialidad\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(28, \"apx-chart\", 11);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(29, \"div\", 12)(30, \"div\", 13)(31, \"h3\");\n            i0.ɵɵtext(32, \"Turnos por profesional\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(33, \"apx-chart\", 14);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(34, \"div\", 10)(35, \"h3\");\n            i0.ɵɵtext(36, \"Turnos por profesional (porcentaje)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(37, \"apx-chart\", 11);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(38, \"div\", 15)(39, \"h3\");\n            i0.ɵɵtext(40, \"Porcentaje de asistencia por profesional\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(41, \"apx-chart\", 14);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            const pickerDesde_r2 = i0.ɵɵreference(10);\n            const pickerHasta_r3 = i0.ɵɵreference(17);\n            i0.ɵɵadvance(7);\n            i0.ɵɵproperty(\"matDatepicker\", pickerDesde_r2)(\"formControl\", ctx.fechaDesde);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"for\", pickerDesde_r2);\n            i0.ɵɵadvance(6);\n            i0.ɵɵproperty(\"matDatepicker\", pickerHasta_r3)(\"formControl\", ctx.fechaHasta);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"for\", pickerHasta_r3);\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"series\", ctx.chartOptions.series)(\"chart\", ctx.chartOptions.chart)(\"labels\", ctx.chartOptions.labels)(\"responsive\", ctx.chartOptions.responsive)(\"legend\", ctx.chartOptions.legend);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"series\", ctx.especialidadesPieOptions.series)(\"chart\", ctx.especialidadesPieOptions.chart)(\"labels\", ctx.especialidadesPieOptions.labels)(\"responsive\", ctx.especialidadesPieOptions.responsive)(\"legend\", ctx.especialidadesPieOptions.legend);\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"series\", ctx.barChartOptions.series)(\"chart\", ctx.barChartOptions.chart)(\"xaxis\", ctx.barChartOptions.xaxis)(\"yaxis\", ctx.barChartOptions.yaxis)(\"plotOptions\", ctx.barChartOptions.plotOptions)(\"dataLabels\", ctx.barChartOptions.dataLabels)(\"grid\", ctx.barChartOptions.grid)(\"colors\", ctx.barChartOptions.colors)(\"legend\", ctx.barChartOptions.legend)(\"tooltip\", ctx.barChartOptions.tooltip);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"series\", ctx.profesionalesPieOptions.series)(\"chart\", ctx.profesionalesPieOptions.chart)(\"labels\", ctx.profesionalesPieOptions.labels)(\"responsive\", ctx.profesionalesPieOptions.responsive)(\"legend\", ctx.profesionalesPieOptions.legend);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"series\", ctx.asistenciaProfesionalOptions.series)(\"chart\", ctx.asistenciaProfesionalOptions.chart)(\"xaxis\", ctx.asistenciaProfesionalOptions.xaxis)(\"yaxis\", ctx.asistenciaProfesionalOptions.yaxis)(\"plotOptions\", ctx.asistenciaProfesionalOptions.plotOptions)(\"dataLabels\", ctx.asistenciaProfesionalOptions.dataLabels)(\"grid\", ctx.asistenciaProfesionalOptions.grid)(\"colors\", ctx.asistenciaProfesionalOptions.colors)(\"legend\", ctx.asistenciaProfesionalOptions.legend)(\"tooltip\", ctx.asistenciaProfesionalOptions.tooltip);\n          }\n        },\n        dependencies: [NgApexchartsModule, i2.ChartComponent, MatFormFieldModule, i3.MatFormField, i3.MatLabel, i3.MatSuffix, MatInputModule, i4.MatInput, MatDatepickerModule, i5.MatDatepicker, i5.MatDatepickerInput, i5.MatDatepickerToggle, MatNativeDateModule, ReactiveFormsModule, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlDirective, MatIconModule],\n        styles: [\".reportes-container[_ngcontent-%COMP%]{padding:2rem}.new-appointment-btn[_ngcontent-%COMP%]{height:48px;padding:0 24px;font-weight:500;font-size:14px;font-family:Plus Jakarta Sans,sans-serif;background:linear-gradient(135deg,#aa262b,#c62828);border-radius:8px;box-shadow:0 8px 32px #aa262b2e;transition:all .3s ease;color:#f5f1eb!important;border:none!important;outline:none!important}.new-appointment-btn[_ngcontent-%COMP%]:hover{transform:translateY(-2px);box-shadow:0 12px 32px #aa262b47}.new-appointment-btn[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{margin-right:8px}\"]\n      });\n    }\n  }\n  return ReportesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}